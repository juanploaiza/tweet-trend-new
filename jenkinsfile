def registry = 'https://juanploaiza.jfrog.io'
pipeline {
    agent {
        label 'maven'
    }
environment {
    PATH = "/opt/apache-maven-3.9.9/bin:$PATH"
}
    stages {
        stage('build') {
            steps {
                echo "--------- build started --------"
                sh 'mvn clean deploy -Dmaven.test.skip=true'
                echo "--------- build completed --------"
            }
        }
        stage('test') {
            steps {
                echo "--------- test started --------"
                sh 'mvn surefire-report:report'
                echo "--------- test completed --------"
            }
        }
        stage("SonarQube analysis") {
            steps {
                echo "--------- SonarQube analysis started --------"
              withSonarQubeEnv(credentialsId: 'sonar-cred', installationName: 'SonarQube') {
                sh "mvn sonar:sonar -Dsonar.projectKey=juanploaiza_demo-workshop"
              }
                echo "--------- SonarQube analysis completed --------"
            }
          }
        stage("Quality Gate") {
            steps {
                script{
                    timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
          }
        }
        stage("Jar Publish") {
            steps {
                script {
                        echo '<--------------- Jar Publish Started --------------->'
                         def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"jfrog-cred"
                         def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                         def uploadSpec = """{
                              "files": [
                                {
                                  "pattern": "jarstaging/(*)",
                                  "target": "ttrend-libs-release-local/{1}",
                                  "flat": "false",
                                  "props" : "${properties}",
                                  "exclusions": [ "*.sha1", "*.md5"]
                                }
                             ]
                         }"""
                         def buildInfo = server.upload(uploadSpec)
                         buildInfo.env.collect()
                         server.publishBuildInfo(buildInfo)
                         echo '<--------------- Jar Publish Ended --------------->'  
                
                }
            }   
        } 
    }
}